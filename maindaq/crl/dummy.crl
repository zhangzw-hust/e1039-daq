#  Source for generic VME readout using a
#  TJNAF trigger supervisor interface register (TIR)
#  as a source for external interrupts
#
#    David Abbott, TJNAF 1996

readout list VME1
maximum 20000,500
vme readout
ts control
const NLATCH=0
const TIR_ADDR = 0x0ed0
const LATCH_ADDR =0x09100000
int ii;
# Define tsP pointer even if there is no TS in the Crate
struct vme_ts2 *tsP;
extern unsigned int vxTicks;


extern int bigendian_out;

begin download

  variable res

# If the ROC is sending data to Little-Endian EB
# e.g. a x86 Linux CPU then bigendian_out = 0.
# Unless the ROC is also running on a Little-Endian
# machine. Then set bigendian_out=1.
  bigendian_out = 0;


# Setup TIR
#  tsInit(0,0);
  tirInit(TIR_ADDR);

 

  
  log inform "User Download TIR Executed"

end download
    
begin prestart
  log inform "User Prestart TIR Executed"
  log inform "Entering User Trigger Prestart"

  init trig source VME
  link async trig source VME 1 to usrtrig and usrtrig_done
  event type 1 then read VME 1

 
  log inform "Ending TIR Prestart"
#  vmetenable(1,0);
%%
/*
for (ii=0;ii<NLATCH;ii++){ 	  
  latchReset(ii);

  latchTrigDisable(ii);

  latchFifoClear(ii);

  latchEdgeMode(ii,3);

  latchStatus(ii);
}
*/
%%
#H4X
#  latchORoperation(0,21,21);
#H4Y1
#  latchORoperation(1,21,21);
#H4Y2
#  latchORoperation(2,21,21);
#H3
#  latchORoperation(3,21,24);


  log inform "Prestart  1"

end prestart

begin end
  variable trig_count
%%
/*
for (ii=0;ii<NLATCH;ii++){ 	  
  latchTrigDisable(ii);
}
*/

%%
# Get Final Trigger Count
  CDODISABLE(VME,1,0);

  log inform "User End Executed VME TIR"

end end

begin pause

  log inform "User Pause Executed" 
  CDODISABLE(VME,1,0);

end pause

begin go
  CDOENABLE(VME,1,0);
  
#  log inform "Entering User Go"
%%
/*
for (ii=0;ii<NLATCH;ii++){ 	  
  latchTrigEnable(ii);
}
*/
%%
#  log inform "Finish User Go"

end go

begin trigger usrtrig
 
 variable ii, event_ty, event_no
 event_ty = EVTYPE;
 event_no = *rol->nevents;


 rol->dabufp = (long *) 0;
 open event type EVTYPE of BT_UI4
 open bank EVTYPE of BT_UI4 



# latchFifoStatus(0,3);

#  output hex da000022
#  rol->dabufp += 20;
#  output hex da0000ff
# logMsg("I got a trigger!!\n");



  *rol->dabufp++ = vxTicks;

# data latch flag=1, ignore = 0, tdc = 2, scaler = 3
  *rol->dabufp++ =0xe906f000;
 
# logMsg("debug 7!!\n");
 close bank
 close event


end trigger

begin done usrtrig


end done


begin done

# Acknowledge tir register
%%
/*
for (ii=0;ii<NLATCH;ii++){ 
  latchFifoClear(ii);
  latchTrigEnable(ii);
}
*/
%%

  CDOACK(VME,1,0);
end done

begin status

end status


