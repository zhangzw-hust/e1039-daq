#  Source for generic VME readout using a
#  TJNAF trigger supervisor interface register (TIR)
#  as a source for external interrupts
#
#    David Abbott, TJNAF 1996

readout list VME1

# maximum <buffer size per event(in bytes)> <number of buffer to create>
maximum 49152,400
vme readout
ts control

const TDC_ScalarON = 1
const NTDC = 6
const TIR_ADDR = 0x0ed0
const NFlushMax = 9000
const blkSize = 1542
const PerEventRead = 0

# Define tsP pointer even if there is no TS in the Crate
struct vme_ts2 *tsP;
extern unsigned int vxTicks;
int event_no;
int event_ty;
extern int bigendian_out;
int ii;

%%
int ARM_enable = 1;
/*int UP_Limit = 300;*/
/*int Low_Limit = 112;*/
int UP_Limit = 226;//09252019,modified by Helen
int Low_Limit = 16;//09262019,modified by Helen
/* low limit was 25 */
int TDCHardID[6] = {20, 21, 47, 24, 45, 43};

int TDCBoardID = 0x09000000;
int csr = 0xffff0060;  // csr = 0xffff0060 /rising edge;  0xffff0160 /both edge / 2048ns /only 1 buffer
int MultiHitSetup = 0x0;
int TimeWindowOn = 1;
int LimitReg;
int TDCSetup;

int nFlushes = 0;
int BeamOn = 1;
%%

begin download
  variable res

  # If the ROC is sending data to Little-Endian EB
  # e.g. a x86 Linux CPU then bigendian_out = 0.
  # Unless the ROC is also running on a Little-Endian
  # machine. Then set bigendian_out=1.
  bigendian_out = 0;

  # Setup TIR
  tirInit(TIR_ADDR);

  LimitReg = Low_Limit + (UP_Limit << 16) + (TimeWindowOn << 31) + (ARM_enable << 27);
  CR_Init(TDCBoardID, 0x1000000, NTDC);

  log inform "User Download TIR Executed"
end download

begin prestart
  log inform "User Prestart TIR Executed"
  log inform "Entering User Trigger Prestart"

  init trig source VME
  link async trig source VME 1 to usrtrig and usrtrig_done
  event type 1 then read VME 1

  log inform "Ending TIR Prestart"

  rol->dabufp = (long *) 0;
  UEOPEN(132, BT_UI4, 0);

  %%
    //start FEE event
    *rol->dabufp++ = rol->pid;

    for(ii = 0; ii < NTDC; ++ii) {
      *rol->dabufp++ = 0xe906f011; //FEE event flag
      *rol->dabufp++ = TDCBoardID + (ii << 24) + TDCHardID[ii];  //Board ID

      CR_Reset(ii);
      *rol->dabufp++ = csr;  //csr (buffersize, timewindow length, etc)
      *rol->dabufp++ = MultiHitSetup;
      *rol->dabufp++ = LimitReg;
      CR_WR_Reg(ii, 5, LimitReg);
      CR_WR_Reg(ii, 3, MultiHitSetup); //turn off MultiHit Elimination
      CR_WR_Reg(ii, 6, 0);
      DP_Write(ii, 0xe906000f, 0x7ffe, 0x7ffe); // reset ARM

      if(TDC_ScalarON==1) {
        CR_Scalar_Switch(ii, 1);
        CR_ScalarInit(ii, 1);
        CR_ScalarInit(ii, 0);
      }
    }  //for ntdc
  %%

  UECLOSE;
  log inform "Prestart Done."
end prestart

begin end
  variable trig_count

%%
  for(ii = 0; ii < NTDC; ++ii) {
    CR_FastTrigDisable(ii, csr);
    if(TDC_ScalarON == 1) {
      CR_Scalar_Switch(ii, 1); //using buffer0, so set pointer to buffer1 to stop writing to buffer0
      CR_ScalarDisplay(ii, 0); //show buffer0
    }
}
%%

  # Get Final Trigger Count
  CDODISABLE(VME, 1, 0);
  log inform "User End Executed VME TIR"
end end

begin pause
  log inform "User Pause Executed"
  CDODISABLE(VME, 1, 0);
end pause

begin go
  CDOENABLE(VME, 1, 0);
  log inform "Entering User Go"

%%
  BeamOn = 1;
  for(ii = 0; ii < NTDC; ++ii) CR_WR_Reg(ii, 7, 0);
  for(ii = 0; ii < NTDC; ++ii) {
    CR_p[ii]->reg[1] = csr;
    DP_Write(ii, 0xe9068000 + blkSize, 0x7ffe, 0x7ffe);   //set control registers
    CR_FastTrigEnable(ii, csr);
	if(TDC_ScalarON == 1) {
      CR_ScalarDisplay(ii, 0); //show buffer0 (should be empty at go)
      CR_Scalar_Switch(ii, 0); //set pointer to buffer0 to start filling
    }
  }
%%

  log inform "Finish User Go"
end go

begin trigger usrtrig
  variable ii, jj, retVal, maxWords, nWords, remBytes
  int Cnt, totalDMAwords;
  int DP_Bank;
  unsigned int* DMAaddr;
  long tmpaddr1, tmpaddr2;

  event_ty = EVTYPE;
  event_no = *rol->nevents;
  rol->dabufp = (long*)0;
  open event type EVTYPE of BT_UI4
  open bank EVTYPE of BT_UI4

  *rol->dabufp++ = vxTicks;

%%
  if(event_ty == 14 && BeamOn == 1) {  //Physics event
    DP_Bank = ((event_no - 1) & 0xf) << 10;
    /*
    for(ii = 0; ii < NTDC; ++ii) {
      //CR_FastTrigDisable(ii, csr);//when trigger arrives at TDC, disable further trigger input
    }
    */

    for(ii = 0; ii < NTDC; ++ii) {
      // data scaler flag=3, ignore=0, latch=1, tdc=2, dsTDC2 flag=4, v1495=5, ZStdc=6, noZSWC=7, ZSWC=8,
      // Run2TDC= 10, Run2TDC header = 11                                                            ,
      // *rol->dabufp++ = event_no - 1;

      //Per-event readout
      if(PerEventRead == 1) {
        *rol->dabufp++ = 0xe906f010; // run2 TDC
        *rol->dabufp++ = TDCBoardID + (ii << 24);
        *rol->dabufp++ = CR_d[ii]->data[0];

        maxWords = 257;	/// normal data taking
        DMAaddr = TDCBoardID + (ii << 24) + 0x20000 + (DP_Bank << 2);      /// normal data taking

        tmpaddr1 = rol->dabufp;
        tmpaddr2 = DMAaddr;
        if(((tmpaddr1 & 4) >> 2) != ((tmpaddr2 & 4) >> 2)) *rol->dabufp++ = 0xe906e906;

        retVal = sysVmeDmaSend(rol->dabufp, DMAaddr, maxWords << 2, 0);
        if(retVal < 0) {
          logMsg("ERROR in DMA transfer Initialization 0x%x\n", retVal);
          *rol->dabufp++ = 0xda010bad;
        } else {
          remBytes = sysVmeDmaDone(0, 0);
          if(remBytes < 0) {                    //Error
            logMsg("ERROR during DMA transfer 0x%x\n", remBytes);
            *rol->dabufp++ = 0xda020bad;
          } else if(remBytes == 0) {        //Transfer completed //
            rol->dabufp += maxWords;
          } else {                            //Transfer Terminated
            nWords = maxWords - (remBytes >> 2);
            rol->dabufp += nWords;
          }
        }//retVal < 0
        *rol->dabufp++ = 0xe906c0da;
      } else if(PerEventRead == 2) {
        *rol->dabufp++ = 0xe906f010; // run2 TDC
        *rol->dabufp++ = TDCBoardID + (ii << 24);
        *rol->dabufp++ = CR_d[ii]->data[0];
        //for(jj = 0; jj < 16; ++jj) *rol->dabufp++ = DP_Read(ii, jj << 10);
        *rol->dabufp++ = 0xe906c0da;
      }
    }//for NTDC

    //Update eventID
    for(ii = 0; ii < NTDC; ++ii) CR_WR_Reg(ii, 7, event_no);
  } else if(event_ty == 12) {    //EOS event
    for(ii = 0; ii < NTDC; ++ii) CR_FastTrigDisable(ii, csr);
    if(BeamOn == 1) {
      for(ii = 0; ii < NTDC; ++ii) DP_Write(ii, 0xe9060001, 0x7ffe, 0x7ffe);
    }
    nFlushes = 0;
    BeamOn = 0;
    logMsg("Received EOS event! Will start off-beam transfer...\n");
  } else if(event_ty == 11) {   //BOS event
    for(ii = 0; ii < NTDC; ++ii) CR_WR_Reg(ii, 7, event_no);
    for(ii = 0; ii < NTDC; ++ii) CR_FastTrigEnable(ii, csr);
    if(BeamOn == 0) {
      for(ii = 0; ii < NTDC; ++ii) DP_Write(ii, 0xe9060000, 0x7ffe, 0x7ffe);
    }
    BeamOn = 1;
    logMsg("Received BOS event! Will start on-beam transfer...\n");
  } else if(event_ty == 10 && nFlushes < NFlushMax && BeamOn == 0) {
    //logMsg("Flush event received! Read DP ... ");
    ++nFlushes;

    for(ii = 0; ii < NTDC; ++ii) {
      if(nFlushes < NFlushMax) {
        Cnt = DP_Read(ii, 0);
        *rol->dabufp++ = 0xe906f018;
        *rol->dabufp++ = (((TDCBoardID + (ii << 24)) & 0xffff0000) + Cnt);  //boardid, numwords

        if(Cnt > 0 && Cnt < blkSize + 5) {
          //logMsg("Will transfer %d words from TDC %d\n", Cnt, ii);

          DMAaddr = TDCBoardID + (ii << 24) + 0x20000;
          tmpaddr1 = rol->dabufp;
          tmpaddr2 = DMAaddr;
          if(((tmpaddr1 & 4) >> 2) != ((tmpaddr2 & 4) >> 2)) *rol->dabufp++ = 0xe906e906;

          retVal = sysVmeDmaSend(rol->dabufp, DMAaddr, Cnt << 2, 0);
          if(retVal < 0) {
            *rol->dabufp++ = 0xda010bad;
          } else {
            remBytes = sysVmeDmaDone(0, 0);
            if(remBytes < 0) {
              *rol->dabufp++ = 0xda020bad;
            } else if(remBytes == 0) {
              rol->dabufp += Cnt;
            } else {
              nWords = Cnt - (remBytes >> 2);
              rol->dabufp += nWords;
            }
          }
        }

        DP_Write(ii, 0xe9060002, 0x7ffe, 0x7ffe);
      } else {
        DP_Write(ii, 0xe9060003, 0x7ffe, 0x7ffe);

        *rol->dabufp++ = 0xe906f019;
        *rol->dabufp++ = TDCBoardID + (ii << 24);
        *rol->dabufp++ = DP_Read(ii, 0x7ffa);

        DP_Write(ii, 0, 0x7ffa, 0x7ffa);
      }
    }
    *rol->dabufp++ = 0xe906c0da;
  }
%%

 close bank
 close event
end trigger

begin done usrtrig

end done

begin done
  # Acknowledge tir register
  CDOACK(VME,1,0);
end done

begin status

end status
